/*
 * EnvironmentSensorTests.ino
 * 
 * A simple comparision of several different enviroment sensors.
 * The DHT11 sensor uses the Timer class available in mbed OS
 * to get a timer with a greater precision than the default on 
 * the Nano 33 BLE Sense.
 * 
 */
#include <Wire.h>
#include <Arduino_HTS221.h>
#include <Arduino_LPS22HB.h>
#include <Adafruit_Sensor.h>
#define NO_ADAFRUIT_SSD1306_COLOR_COMPATIBILITY
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


// the OLED display
Adafruit_SSD1306 display(128, 32);
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32

//Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// 'logo_Analytics_Logo(1)', 128x32px
const unsigned char myBitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x63, 0x03, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x63, 0x03, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xcf, 0x80, 0x00, 0x66, 0x7b, 0x67, 0xd3, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xc7, 0x80, 0x00, 0x36, 0x5b, 0x6f, 0xd3, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0x87, 0xc0, 0x00, 0x36, 0x7b, 0x6c, 0xd3, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0x83, 0xc0, 0x00, 0x3c, 0xfb, 0x6c, 0xdb, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0x03, 0xc0, 0x00, 0x1c, 0xdb, 0x6f, 0xdf, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xbf, 0xc0, 0x00, 0x18, 0x7b, 0x67, 0x9f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0x87, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0x83, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0x87, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xf7, 0xc7, 0x9f, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xe3, 0xef, 0x8f, 0x00, 0x1c, 0x00, 0x06, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xe3, 0xff, 0x07, 0x80, 0x1c, 0x00, 0x06, 0x07, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xc1, 0xff, 0x07, 0x80, 0x3c, 0x7d, 0xe7, 0x9f, 0xa7, 0xb8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xc1, 0xfe, 0x07, 0xc0, 0x36, 0x6c, 0x36, 0xdf, 0x2e, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x3e, 0x4d, 0xf6, 0xf3, 0x3c, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x7e, 0xcd, 0xb6, 0xf3, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x63, 0xcd, 0xf6, 0x73, 0xa7, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0x87, 0xfe, 0x00, 0x43, 0x4d, 0xe4, 0x63, 0xa7, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {
  Serial.begin(9600);  
 
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  delay(2000); // Pause for 2 seconds
 
  // Clear the buffer.
  display.clearDisplay();
  
  // Draw bitmap on the screen
  display.drawBitmap(0, 0, myBitmap, 128, 32, 1);
  display.display();
  delay(4000);




  // put your setup code here, to run once:

  
  
  
  if (!HTS.begin()) {
    Serial.println("Error initializing HTS sensor\n");
    while (1);
  }
  if (!BARO.begin()) {
    Serial.println("Failed to initialize pressure sensor!");
    while (1);
  }

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("Error initializing OLED display\n");
    while (1);
  }

  Serial.print("Clock = "); 
  Serial.println(SystemCoreClock);
}

void loop() {
  float hts_temp, hts_humidity;
  
  hts_temp = HTS.readTemperature();
  hts_humidity = HTS.readHumidity();
  float pressure = BARO.readPressure(PSI);

  
  // HTS221 - on board on the Nano 33 BLE Sense
//  Serial.print("HTS temp = ");
//  Serial.print(hts_temp);
//  Serial.print(", humidity = ");
//  Serial.println(hts_humidity);

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0); 
  display.print("Temp = ");
  display.print(hts_temp);
  display.print("Â°C");
  display.setCursor(0, 8);
  display.print("humidity = ");
  display.print(hts_humidity);
  display.print("%");
  display.setCursor(0, 24);
  display.print("Pressure = ");
  display.print(pressure);
  display.print("PSI");
  display.setCursor(0, 32);
  display.print("Pressure = ");
  display.print(pressure);
  display.print("PSI");
  display.display();
  
  delay(1000);
}
